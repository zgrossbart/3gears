/******************************************************************************* 
 * 
 * Copyright 2011 Zack Grossbart 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/
 
var gear = {
	scale: 15,
	toothSize: 28,
    stopped: false,
    create: function(point, teeth, color, speed, correct) {
		this.color = color;
		this.group = new Group();
		this.group.teeth = teeth;
        var radius = teeth * this.scale / 2;
        
        var outerCircle = new Path.Circle(point, radius);
		outerCircle.fillColor = color;
		
        var innerCircle = outerCircle.clone().scale(0.25);
        innerCircle.fillColor = 'white';
		var compound = new CompoundPath([outerCircle, innerCircle]);

        this.drawTeeth(radius - 5, teeth);
		this.group.position = point;
		this.group.speed = speed;
		this.group.rotate(correct);
		this.group.onFrame = function(event) {
			if (!gear.stopped)
				this.rotate(this.speed);
		};
    },
    
	drawTeeth: function(radius, amount) {
        var increase = 360 / amount;
		var symbol = this.createToothSymbol();
        for (var i = 0; i < amount; i++) {
			var position = new Point({
				angle: increase * i,
				length: radius + (this.toothSize / 2)
			});
			tooth = symbol.place(position);
			tooth.rotate(increase * i + 90);
			this.group.addChild(tooth);
        }
    },
    
    createToothSymbol: function() {
		if (!this.tooth) {
	        var t2 = new Point(this.toothSize / 2);
			this.tooth = new Path([
				t2 / [-2, -1] + [2, 0],
				t2 / [2, -1] - [6, 0],
				t2 / [2, -1] + [0, 8],
				t2,
				t2 * [-1, 1],
				-t2 + [4, 8]
			]);
			this.tooth.closed = true;
		}
		var path = this.tooth.clone();
		path.fillColor = this.color;
		return new Symbol(path);
    }
};

function onMouseUp(event) {
    gear.stopped = !gear.stopped;
}

var speed = 0.5;

gear.create(new Point(160, 246.66666666666666), 15, '#ee2a33', 0.75, 0);
gear.create(new Point(130.74028206312224, 412.6067730492237), 4, '#00aeef', -2.8125, -112.33667772584474);
gear.create(new Point(354.5332283439991, 699.0486819852672), 41, '#52b755', 0.27439024390243905, -125.43978130117182);
gear.create(new Point(660.7461607149166, 476.5719639925661), 6, '#d03c3a', -1.875, 123.49174888349914);
gear.create(new Point(780.6906791390614, 545.8219639925661), 9, '#F00FF0', 1.25, -152.5256238362035);
gear.create(new Point(838.6704171431189, 436.77793627448864), 4, '#fec01e', -2.8125, 92.07585736299353);
gear.create(new Point(758.6919094488217, 238.82418332447955), 21, '#e0cb61', 0.5357142857142857, 71.50237296382605);
gear.create(new Point(528.329152042161, 105.82418332447952), 11, '#f69c9f', -1.0227272727272727, 15.895055939524124);
gear.create(new Point(434.1051478073402, 245.51701430000406), 8, '#157d6b', 1.40625, -65.52357809966634);

